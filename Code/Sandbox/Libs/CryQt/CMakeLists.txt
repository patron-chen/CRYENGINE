#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

start_sources()
# -- cryqt.waf_files --
sources_platform(ALL)
add_sources("NoUberFile"
	SOURCE_GROUP "QToolWindowManager"
		"QToolWindowManager/QToolWindowManagerCommon.cpp"
		"QToolWindowManager/QToolWindowManagerCommon.h"
		"QToolWindowManager/QToolWindowManager.cpp"
		"QToolWindowManager/QToolWindowManager.h"
		"QToolWindowManager/IToolWindowArea.h"
		"QToolWindowManager/QToolWindowArea.cpp"
		"QToolWindowManager/QToolWindowArea.h"
		"QToolWindowManager/QToolWindowWrapper.cpp"
		"QToolWindowManager/QToolWindowWrapper.h"
		"QToolWindowManager/QToolWindowCustomWrapper.cpp"
		"QToolWindowManager/QToolWindowCustomWrapper.h"
		"QToolWindowManager/QCustomWindowFrame.cpp"
		"QToolWindowManager/QCustomWindowFrame.h"
		"QToolWindowManager/IToolWindowDragHandler.h"
		"QToolWindowManager/QToolWindowDragHandlerDropTargets.cpp"
		"QToolWindowManager/QToolWindowDragHandlerDropTargets.h"
		"QToolWindowManager/QToolWindowDragHandlerNinePatch.cpp"
		"QToolWindowManager/QToolWindowDragHandlerNinePatch.h"
		"QToolWindowManager/QToolWindowTabBar.cpp"
		"QToolWindowManager/QToolWindowTabBar.h"
	SOURCE_GROUP "Resource Files"
		"QToolWindowManager/QToolWindowManager.qrc"
		"QToolWindowManager/gfx/base_window.png"
		"QToolWindowManager/gfx/dock_bottom.png"
		"QToolWindowManager/gfx/dock_left.png"
		"QToolWindowManager/gfx/dock_right.png"
		"QToolWindowManager/gfx/dock_top.png"
		"QToolWindowManager/gfx/drag_handle.png"
		"QToolWindowManager/gfx/hsplit_top.png"
		"QToolWindowManager/gfx/hsplit_bottom.png"
		"QToolWindowManager/gfx/vsplit_left.png"
		"QToolWindowManager/gfx/vsplit_right.png"
		"QToolWindowManager/gfx/minimize.png"
		"QToolWindowManager/gfx/maximize.png"
		"QToolWindowManager/gfx/restore.png"
		"QToolWindowManager/gfx/close.png"
	SOURCE_GROUP "Root"
		"stdafx.cpp"
		"stdafx.h"
)

end_sources()
#END-FILE-LIST

CreateDynamicModule(CryQt PCH "stdafx.cpp" SOLUTION_FOLDER "Sandbox")
target_compile_definitions(${THIS_PROJECT} PRIVATE -DCryQT_EXPORTS -DWIN32)
target_link_libraries(${THIS_PROJECT} PRIVATE dwmapi gdi32 Ole32 qtmain$<$<CONFIG:Debug>:d>)
use_qt()
