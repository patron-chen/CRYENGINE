// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#define INST_STREAM_CUSTOM                        \
#if %_RT_INSTANCING_ATTR                          \
  float4 InstAmbientOp  : TEXCOORDN;              \
  float4 InstCloakParams[2] : TEXCOORDN;             \
#endif                                            \  

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "ModificatorVT.cfi"
#include "ModificatorTC.cfi"


// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "Public;"
           "NoPreview;"
           "ShaderDrawType = General;"
           "ShaderType = FX;"
>;

// Tweakables /////////////////

float RefrBumpScale
<
  register = REG_PM_PARAM_0.x;
  string UIName = "Refraction Bump Scale";    
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 4.0;
  float UIStep = 0.1;
> = 1;

float SparksTilling
<
  register = REG_PM_PARAM_0.y;
  string UIName = "Sparks tilling";    
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 4.0;
  float UIStep = 0.1;
> = 1.0;


float DetailBumpTillingU
<
  register = REG_PM_PARAM_0.z;
  string UIHelp = "Set detail diffuse_bump tilling";                     
  string UIName = "Detail tilling U";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 128.0;
  float UIStep = 0.1;
> = 1.0;

float DetailBumpTillingV
<
  register = REG_PM_PARAM_0.w;
  string UIHelp = "Set detail diffuse_bump tilling";                     
  string UIName = "Detail tilling V";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 128.0;
  float UIStep = 0.1;
> = 1.0;

float DetailBumpScale
<
  register = REG_PM_PARAM_1.x;
  string UIHelp = "Set detail bump scale";                     
  string UIName = "Detail bump scale";    	  
  string UIWidget = "slider";
  float UIMin = 0.125;
  float UIMax = 10.0;
  float UIStep = 0.1;
> = 0.0;


/// Un-Tweakables //////////////////////

float4 ScrSize : PB_ScreenSize;
float4 CloakParams[2] : PI_CloakParams < vsregister = c4; >;	// CloakParams[0] - x = refraction falloff, y = cloak palette channel, z = light amount, w = cloak blend amount
																															// CloakParams[1] - x = spark alpha, y = free, z = free, w = free
float4 AnimGenParams = { PB_time 0.4, PB_time 1.0, PB_time 1.0, PB_time 1.0 };

float4 RandomVals :PB_RandomParams;
float4x4 mComposite  : PI_Composite; // View*Projection

// Samplers /////////////////

sampler2D envMapSamplerRefr 
{
  Texture = $SceneTarget;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT;
  AddressU = Clamp;
  AddressV = Clamp;   
  sRGBLookup = true; 
};

sampler2D cloakPaletteMapSampler = sampler_state
{
  Texture = EngineAssets/Textures/palette/cloak_palette.tif;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Clamp;
  AddressV = Clamp;	
};

sampler2D cloakInterlationMapSampler = sampler_state
{
  Texture = EngineAssets/Textures/palette/cloak_interlation.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Wrap;
  AddressV = Clamp;	
};

sampler2D cloakTransitionMapSampler = sampler_state
{
  Texture = EngineAssets/Textures/palette/cloak_transition.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Clamp;
  AddressV = Clamp;	
};

sampler2D cloakSparksMapSampler = sampler_state
{
  Texture = EngineAssets/Textures/palette/cloak_sparks.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Wrap;
  AddressV = Clamp;	
};

sampler3D volumeNoiseSampler = sampler_state
{  
  Texture = EngineAssets/Textures/Noise3D.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Wrap;
  AddressV = Wrap;
  AddressW = Wrap;
};

sampler2D nanoPatternBumpMapSampler = sampler_state
{
  Texture = EngineAssets/Textures/hex_ddn.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = NONE; 
  AddressU = Wrap;
  AddressV = Wrap;	
};

sampler2D perlinNoiseSampler
{
  Texture = EngineAssets/Textures/perlinNoise_sum.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = POINT;
  AddressU = Wrap;
  AddressV = Wrap;	
};


///////////////// vertex input/output //////////////////

struct vtxOUT
{
  OUT_P    
  float4 baseTC    : TEXCOORDN;    
  float4 viewVec   : TEXCOORDN;    
  float4 screenPos : TEXCOORDN;
  float4 vTangent  : TEXCOORDN;    
  float4 vBinormal : TEXCOORDN;    
  float4 vNormal   : TEXCOORDN; 
  float4 vPosWS    : TEXCOORDN; 
};

struct vtxOUTSparks
{
  OUT_P  
  float4 baseTC     : TEXCOORDN;    
  float4 screenPos  : TEXCOORDN;
  float4 vPosOS     : TEXCOORDN;    //w: distance to world origin
  float3 vConstants : TEXCOORDN;
};

///////////////// vertex shader //////////////////

vtxOUT CloakVS(app2vertGeneral IN)
{
  vtxOUT OUT = (vtxOUT)0; 

  // Position in screen space.
  streamPos vertPassPos = (streamPos)0;
  streamPos_FromGeneral(IN, vertPassPos);

  _TCModify(vertPassPos.baseTC, OUT.baseTC, vertPassPos.Position, vertPassPos.ObjToTangentSpace[2], TS_DIFFUSE);
	float4 vCloakParams = 0;
  #if %_RT_INSTANCING_ATTR
    vCloakParams = IN.InstCloakParams[0];
  #else
    vCloakParams = CloakParams[0];
  #endif

	OUT.baseTC.zw = vCloakParams.wz;

  // Output position
  OUT.HPosition = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);

  // Output tangent to world space matrix
  float3 worldTangentS = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[0]) );
  float3 worldTangentT = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[1]) );
  float3 worldTangentN = (cross(worldTangentS, worldTangentT)) * vertPassPos.Tangent.w;

  OUT.vTangent.xyz = worldTangentS; 
  OUT.vBinormal.xyz = worldTangentT;
  OUT.vNormal.xyz = worldTangentN;

	// Output the screen-space texture coordinates
  OUT.screenPos = HPosToScreenTC(OUT.HPosition);

  // Store light amount
  OUT.screenPos.z = OUT.baseTC.w * 0.2; // only use 20%

  // output world position and view vector
  OUT.viewVec.xyz = vertPassPos.WorldPos.xyz;
  OUT.vPosWS.xyz = vertPassPos.WorldPos.xyz+g_VS_WorldViewPos.xyz;

  // output distance to world origin for frac/noise variation stuff
  OUT.vPosWS.w = length(  OUT.vPosWS.xyz   );

  // Output some constants
  OUT.baseTC.w = (0.25 + 0.25 * (1-OUT.baseTC.z)*10 ) * RefrBumpScale * vCloakParams.x;
  OUT.baseTC.z = saturate( OUT.baseTC.z ) * 0.8;

	/////////////////////////////////////////////////////////////////////
  // Get palette channel

	OUT.viewVec.w = vCloakParams.y;

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

pixout CloakRefrationPS(vtxOUT IN)
{
  pixout OUT = (pixout)0;
  int nQuality = GetShaderQuality(); 

  half fLightAmount = IN.screenPos.z;
  half2 vRefrCloakAmount = IN.baseTC.wz;

  half2 refrTC = (IN.screenPos.xy/IN.screenPos.w) ;
  float3x3 mTangentToWS = float3x3(IN.vTangent.xyz, IN.vBinormal.xyz, IN.vNormal.xyz);  

  half3 normalVec= GetNormalMap(normalsTex, IN.baseTC.xy);
  normalVec.xy += GetXYNormalMap(detailTex, IN.baseTC.xy * float2(DetailBumpTillingU, DetailBumpTillingV)) * DetailBumpScale;
	
 half fMaskVariation = saturate(tex2D(perlinNoiseSampler, IN.baseTC*0.5 + AnimGenParams.x*0.25).x*2-1);

	half2 vNanoPattern = -GetXYNormalMap(nanoPatternBumpMapSampler, IN.baseTC.xy * 30) *  vRefrCloakAmount.y * 2;
	//normalVec.xy += vNanoPattern;
	
	normalVec.xyz = normalize( normalVec.xyz );

  half3 eyeVec = normalize(-IN.viewVec.xyz);

  // Put in world space
  half3 vNormal = normalize(mul(normalVec, mTangentToWS).xyz);                                   // 6 alu
  half NdotESat = dot(eyeVec.xyz, vNormal.xyz);
  half NdotEAbs = abs(NdotESat); 
  NdotESat = saturate(NdotESat);
	half fFresnel = 1-NdotESat;
	fFresnel *= fFresnel;
	fFresnel *= fFresnel;
	fFresnel = fFresnel;

  half3 eyeVecTS = ( mul(mTangentToWS, (IN.viewVec.xyz))  );
	//eyeVecTS.xy += normalVec.xy*0.5;
	eyeVecTS = normalize(eyeVecTS);

	half fNanoMask = saturate( 1 - 100*dot(vNanoPattern.xy, vNanoPattern.xy)); //

  // cloakInterlationMapSampler= abs(frac((refrTC.y+RandomVals.x)*PS_ScreenSize.y*0.25)*2-1)*0.1+0.9;
  half2 vInterlation  =abs(frac((refrTC.y+RandomVals.x)*PS_ScreenSize.y*0.25)*2-1)*0.1+0.9;//tex2D(cloakInterlationMapSampler, (refrTC.y+RandomVals.x)*PS_ScreenSize.y*0.25 ).xy;
	vInterlation -= vNanoPattern*(1-fNanoMask);
	//vInterlation = normalize( vInterlation );
  
  float2 vRefrVS = 0.0f;
  // "aproximate" refraction vector (using 1 for IOR)
  half3 vRefr =  - 2.0 * NdotESat * vNormal + eyeVec;

  // Project refraction into screen space
  float4 vRefrPos = mul(mComposite, float4(IN.vPosWS.xyz + 0.4*vRefr*0.05 * vRefrCloakAmount.x * vInterlation.x , 1));                           // 4 alu
  vRefrVS = 0.5 + ScrSize.zw + (vRefrPos.xy * float2( 0.5 , -0.5 ) / vRefrPos.w);
  vRefrVS = ClampScreenTC(GetScaledScreenTC(vRefrVS));

  half2 halfOffset = GetScaledScreenTC(0.5.xx);

  // Fetch refraction map - use offset on red component for achromatic aberration aproximation
  half3 refrColor = DecodeHDRBuffer( tex2D(envMapSamplerRefr, ((vRefrVS.xy)-halfOffset)*(1-0.04*PS_HPosScale.x) +halfOffset) ).x;
  refrColor.y = DecodeHDRBuffer( tex2D(envMapSamplerRefr, ((vRefrVS.xy)-halfOffset)*(1 - 0.03*PS_HPosScale.x) +halfOffset) ).y;
  refrColor.z = DecodeHDRBuffer( tex2D(envMapSamplerRefr, ((vRefrVS.xy)-halfOffset)*(1 - 0.015*PS_HPosScale.x) +halfOffset) ).z;

  refrColor /= PS_HDR_RANGE_ADAPT_MAX;

  // Fetch color gradient
  half fCloakColorGradient = vInterlation.y * saturate(1- NdotEAbs);
    
	half fPaletteChannel = IN.viewVec.w;
  half3 cCloak = 0; //fCloakColorGradient * half3(0.2, 0.4, 1)*(dot(refrColor.xyz, 0.33)+fLightAmount)*0.5;
	cCloak  = tex2D(cloakPaletteMapSampler, half2(fCloakColorGradient,fPaletteChannel )).xyz*(dot(refrColor.xyz, 0.33)+fLightAmount)*0.5;

  // Output final color and blending amount
  //OUT.Color = half4(refrColor + clamp( dot(refrColor.xyz, 0.33), 0.2, 0.8) * cCloak * saturate(1-NdotESat) * PS_HDR_RANGE_ADAPT_MAX,
  OUT.Color = half4(PS_HDR_RANGE_ADAPT_MAX*(refrColor + fMaskVariation*saturate(fNanoMask>0)*cCloak*saturate(1-NdotESat)),	
										saturate(fNanoMask)*vRefrCloakAmount.y); // 

  // blend in shader to avoid sorting issues with alpha blend + depth test
  half3 sceneColor = DecodeHDRBuffer( tex2D(envMapSamplerRefr, refrTC.xy) ).rgb;
  OUT.Color = float4(lerp(sceneColor, OUT.Color.rgb, OUT.Color.a), 1.0f);

  return OUT;  
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

vtxOUTSparks CloakSparksVS(app2vertMotionBlur IN)
{
  vtxOUTSparks OUT = (vtxOUTSparks)0; 

  // Position in screen space.
  streamPos vertPassPos = (streamPos)0;

  streamPos_FromMotionBlur(IN, vertPassPos);

  // This code is no longer valid since the binormal and tangent
  // aren't correct until after skinning. This code is slow after skinning though,
  // so it's removed for now
  //vertPassPos.ObjToTangentSpace[0] = vertPassPos.Tangent.xyz;
  //vertPassPos.ObjToTangentSpace[1] = vertPassPos.Binormal.xyz;
  //vertPassPos.ObjToTangentSpace[2] = normalize(cross(vertPassPos.ObjToTangentSpace[0], vertPassPos.ObjToTangentSpace[1])) * vertPassPos.Tangent.w;
  
  // Displace vertex position for more interesting sparks animation
  //vertPassPos.Position.xyz += vertPassPos.ObjToTangentSpace[2] * (0.0025 + 0.01*sin(g_VS_AnimGenParams.x*4+20*length(vertPassPos.Position.xyz)));//*OUT.baseTC.z;

  streamPos vertPassPosPrev = vertPassPos;

  _TCModify(vertPassPos.baseTC, OUT.baseTC, vertPassPos.Position, vertPassPos.ObjToTangentSpace[2], TS_DIFFUSE);
  
  float4 vCloakParams[2];
  #if %_RT_INSTANCING_ATTR
    vCloakParams[0] = IN.InstCloakParams[0];
		vCloakParams[1] = IN.InstCloakParams[1];
  #else
    vCloakParams[0] = CloakParams[0];
		vCloakParams[1] = CloakParams[1];
  #endif
  OUT.baseTC.zw = vCloakParams[0].wz;

	const float fSparksAlpha = vCloakParams[1].x;
	OUT.baseTC.w *= fSparksAlpha;

  OUT.vPosOS.xyz = vertPassPos.Position.xyz * SparksTilling;
  
  OUT.HPosition = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);

  //////////////////////////////////////////////////////////////////////////////////////////////////
  // Output distance to world origin
  float3 vWorldPos = vertPassPos.WorldPos.xyz+g_VS_WorldViewPos.xyz;
  OUT.vPosOS.w = length(  vWorldPos.xyz   );

	// Output the screen-space texture coordinates
  OUT.screenPos = HPosToScreenTC(OUT.HPosition);

  //////////////////////////////////////////////////////////////////////////////////////////////////
  // Output commonly used constants
  OUT.screenPos.z = OUT.screenPos.w* g_VS_NearFarClipDist.w;
#if %_RT_NEAREST
  OUT.screenPos.z *= g_VS_NearFarClipDist.z;
#endif

  float fCloakAmount = OUT.baseTC.z;
  float fCloakAmountBump = max(1 - fCloakAmount, 0.0);
  OUT.vConstants.xy = half2(frac(AnimGenParams.x)*2,  1 ) * 0.1 * half2( 1-fCloakAmount, max((1-fCloakAmount)*0.2, 0.1));

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

pixout CloakSparksPS(vtxOUTSparks IN)
{
  pixout OUT = (pixout)0;

  int nQuality = GetShaderQuality(); 

  half fCloakAmount = IN.baseTC.z;
  half fLightAmount = IN.baseTC.w;

  half2 refrTC = (IN.screenPos.xy/IN.screenPos.ww) ;
  half3 normalVec = GetNormalMap(normalsTex, IN.baseTC.xy);

  // cloakInterlationMapSampler.w = abs(frac((refrTC.y+RandomVals.x)*PS_ScreenSize.y*0.25)*2-1);
  half fInterlation  = tex2D(cloakInterlationMapSampler, (refrTC.y+RandomVals.x)*PS_ScreenSize.y*0.25 ).w;

  half2 vCloakTransition = IN.vConstants.xy;
  half3 vSparksVariation = vCloakTransition.x + normalVec.xyz * vCloakTransition.y; // 1 inst

  half fSparks = tex3D(volumeNoiseSampler, IN.vPosOS.xyz + vSparksVariation).w; // 1 inst
 // fSparks = tex3D(volumeNoiseSampler, IN.vPosOS.xyz + fSparks*0.2 + vSparksVariation).w;;  // 2 inst

  // shader model 2.0 has restritions regarding to texture fetch dependency chain complexity
 // fSparks = tex3D(volumeNoiseSampler, IN.vPosOS.xyz + fSparks*0.4 + vSparksVariation).w; // 2 inst

  half fCloakTransition = tex2D(cloakTransitionMapSampler, fCloakAmount).w;
  fCloakTransition *= fCloakTransition ;
  fCloakTransition *= fCloakTransition ;

//  half3 fSparksFinal =  8 * SparksColor *((pow( abs( frac(fSparks + AnimGenParams.x + 0.1)*2-1), 64*4)+
//                                           pow( abs( frac(fSparks*1.53 + AnimGenParams.x*2 + 0.4+  IN.vPosOS.w*0.1)*2-1), 64*2) )+
//                                           pow( abs( frac(fSparks*1.7 + AnimGenParams.x*1.4 + 0.2)*2-1), 64*2) );
//fSparksFinal *= fSparksFinal;

   half3 fSparksFinal =  half3(tex2D(cloakSparksMapSampler,  fSparks + AnimGenParams.x + 0.1).x, // 1 inst
                               tex2D(cloakSparksMapSampler,  fSparks*1.53 + AnimGenParams.x*2 + 0.4+  IN.vPosOS.w*0.1).y, // 4 inst
                               tex2D(cloakSparksMapSampler,  fSparks*1.7 + AnimGenParams.x*1.4 + 0.2).z ); // 2 inst
  fSparksFinal = half4(0.1, 0.3, 1.0, 1) * dot(fSparksFinal.xyz, 2); // 2 inst
  fSparksFinal *= fSparksFinal; // 1 inst

  half4 finalColor = 0;
	const float fSpeedScale = 0.25f;
  finalColor.xyz = fInterlation * fSparksFinal * max(fSpeedScale, fCloakTransition); // 3 inst

  float fDepth = GetLinearDepthProj( sceneLinearDepthTex, IN.screenPos );  
  finalColor.xyz *=  saturate( (fDepth  - IN.screenPos.z )*10000); // soft-ztest // 3 inst

  finalColor.xyz *= PS_HDR_RANGE_ADAPT_MAX;

  OUT.Color = finalColor *fLightAmount;

  return OUT;  
}

//////////////////////////////// technique ////////////////

technique General
{
  pass p0
  {
    VertexShader = CloakVS() CloakVS;
    PixelShader = CloakRefrationPS() CloakPS;
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = Back;
    ZFunc = LEqual;
  }

  pass p1
  {
    VertexShader = CloakSparksVS() CloakVS;
    PixelShader = CloakSparksPS() CloakPS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = Back;
    ZFunc = LEqual;

    SrcBlend = ONE;
    DestBlend = ONE;
    AlphaBlendEnable = true;
  }
}
