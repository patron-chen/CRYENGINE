// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

struct vert2fragDebug
{
#if %_DS || %_PS || %_GS || !ENABLE_TESSELLATION || %_RT_NO_TESSELLATION
	OUT_HPOS_IN_WPOS
#endif
 
	float4 baseTC  : TEXCOORDN; 
	float4 Color   : TEXCOORDN;
	
	float4 vView   : TEXCOORDN;
#if ENABLE_TESSELLATION && !%_RT_NO_TESSELLATION
	float4 vNormal : TEXCOORDN;
#endif
};

struct app2vertDebug
{
  app2vertCommon vertCommon;

  #if %_RT_INSTANCING_ATTR || %_RT_INSTANCING_CONST
    float4 InstAmbientOp  : TEXCOORDN;
  #endif
};

vert2fragDebug Common_DebugPassVS(app2vertDebug IN)
{
  vert2fragDebug OUT = (vert2fragDebug)0;
  
  streamPos vertPassPos = (streamPos)0;
  vtxStreamUnifyCommon(IN.vertCommon, vertPassPos);
  
#if %TEMP_TERRAIN
  float4 HPosition = Pos_VS_Terrain(0.0005f, g_VS_ViewProjZeroMatr, vertPassPos);
#else  
  float4 HPosition = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);  
#endif

	float3 vPos = vertPassPos.WorldPos.xyz;

#if ENABLE_TESSELLATION && !%_RT_NO_TESSELLATION
	//relative position
	OUT.vView.xyz = vPos.xyz;
	OUT.vNormal.xyz = normalize(mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.Normal.xyz));
#else
	OUT.vView.xyz = vPos.xyz;
	OUT.HPosition = HPosition;
#endif

	_TCModify(vertPassPos.baseTC, OUT.baseTC, 0, 0, TS_DIFFUSE);
	
#if %_RT_SAMPLE1  // Selection Pass
	// We are passing the actual texture coordinate here for use in alpha testing
	OUT.Color = float4(IN.vertCommon.baseTC.x, IN.vertCommon.baseTC.y, 0, 0);
#else  // Debug Views
	// Prepare color for wireframe
	OUT.Color = lerp(float4(0, 0.7, 0.9, 1), float4(0.35, 0.35, 0.35, 1), saturate(HPosition.w / 100.0));
#endif
	
  return OUT;            
}

Texture2D<float4> SceneDepthTex : register(t25);

pixout Common_DebugPassPS(vert2fragDebug IN)
{
  pixout OUT = (pixout)0;
	
	// Debug Views
#if !%_RT_SAMPLE1
	[branch] if (CP_Custom_ViewMode.x == 0)  // Wireframe
	{
		OUT.Color.xyz = IN.Color.xyz;
	}
	else if (CP_Custom_ViewMode.x == 1)  // Texel density
	{
		float2 diffuseTexRes = 0;
#if !OPENGL
	diffuseTex.GetDimensions(diffuseTexRes.x, diffuseTexRes.y);
#endif
	
		float3 ddx_P = ddx(IN.vView.xyz);
		float3 ddy_P = ddy(IN.vView.xyz);
		float2 ddx_T = ddx(IN.baseTC.xy);
		float2 ddy_T = ddy(IN.baseTC.xy);

		float tx = length(ddx_T) / length(ddx_P) * diffuseTexRes.x * 0.5 / CP_Custom_ViewMode.y;
		float ty = length(ddy_T) / length(ddy_P) * diffuseTexRes.y * 0.5 / CP_Custom_ViewMode.y;
		float t = max(tx, ty);
		
		float2 p = frac(IN.baseTC.xy * diffuseTexRes / 16.0); // 16x16 texels are a 2x2 checkerboard block
		float checker = p.x < 0.5 ? (p.y < 0.5 ? 0.9 : 1) : (p.y < 0.5 ? 1 : 0.9);

		// Sample diffuse tex so texture modificator in VS gets properly applied
		// Multiply by very small number and use result so compiler doesn't optimize tex fetch away
		float3 c = GetDiffuseTex(diffuseTex, IN.baseTC.xy) * 0.0001;
		c += GetTexture2D(dissolveNoiseTex, ssMaterialBilinearClamp, float2(t, 0.25));
		
		OUT.Color = float4(c * checker, 1);
	}
#endif

	// Selection Pass
#if %_RT_SAMPLE1
	// ID flags. Make sure those are synced between PostEffects.cfx and IRenderNode
	#define SELECTED_FLAG    (1)
	#define HIGHLIGHTED_FLAG (1 << 1)
	#define HIDDEN_FLAG      (1 << 2)

#if %_RT_ALPHATEST
  // only access texture for alpha tested meshes
  float alpha = GetAlphaTex(diffuseTex, IN.Color.xy);
  float alphaTest =	Get_MaterialAlphaTest();
  clip(alpha - alphaTest); //need to perform texkill just like in regular passes
#endif 

  // write the selection ID to our color with some possible modifications
  uint selectionID = asuint(PerInstanceCustomData2.x);

  // now we need to compare the scene's depth to the fragment's depth. We do that here instead of after rendering, so precision is maintained better
  float fragmentDepth = IN.WPos.z;
  int3 vPixCoord = int3(IN.WPos.xy, 0);
  float sceneDepth = SceneDepthTex.Load(vPixCoord);

  if (fragmentDepth < 0.999 * sceneDepth)
  {
    // set the fragment as occluded in regular scene
    selectionID |= HIDDEN_FLAG;
  }

  OUT.Color.x = asfloat(selectionID);
#endif

  return OUT;
}

#include "CommonDebugPassTess.cfi"

technique DebugPass
{
  pass p0
  {
    VertexShader = Common_DebugPassVS() DebugPassVS;
#if ENABLE_TESSELLATION
    HullShader   = Common_DebugPassHS() DebugPassHS;
    DomainShader = Common_DebugPassDS() DebugPassDS;
#endif
    PixelShader = Common_DebugPassPS() DebugPassPS;

    ZEnable = true;
    ZWriteEnable = false;
#if %GRASS || %LEAVES
    CullMode = None;
#else
    CullMode = Back;
#endif
    IgnoreMaterialState = true;

    AlphaBlendEnable = true;
    SrcBlend = SRC_ALPHA;
    DestBlend = ONE_MINUS_SRC_ALPHA;
    ZFunc = LEqual;
  }
}
