// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

float4 CloudShadowAnimParams	: PB_CloudShadowAnimParams;
float4 CloudShadowParams			: PB_CloudShadowParams;

CLOUD_SHADOW_MAP

sampler2D envMapSamplerRefr
{
	Texture = $SceneTarget;
	MinFilter = POINT;
	MagFilter = POINT;
	MipFilter = POINT;
	AddressU = Clamp;
	AddressV = Clamp;
	sRGBLookup = true; 
};

sampler2D particlesThicknessSampler
{
	Texture = $BackBufferScaled_d4;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = LINEAR;  
	AddressU = Clamp;
	AddressV = Clamp;  
};

sampler2D gradientMapSampler = sampler_state
{
	Texture = EngineAssets/Textures/TexelsPerMeterGrad.dds;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = NONE; 
	AddressU = Clamp;
	AddressV = Clamp;
};

samplerCUBE environmentCMSampler = sampler_state
{
	Texture = $FromRE0;
	AddressU = Clamp;
	AddressV = Clamp;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = LINEAR;
};

//////////////////////////////////////////////////////////////////////////////////////////////////

struct OutputVS
{
	float4 HPosition  : POSITION;

	float4 baseTC    : TEXCOORDN;   // zw = orig tc

#if %_RT_ANIM_BLEND || %_RT_PARTICLE_SHADOW
	float4 blendTC   : TEXCOORDN; // w: sun shadow
#endif

	half4 alphaClip  : TEXCOORDN;

#if (FEATURE_PARTICLES_TESSELLATION && !%_RT_NO_TESSELLATION) || %BUMP_MAP || USE_MATERIAL
	half4 vWorldPos : TEXCOORDN;
#endif
#if USE_MATERIAL
	half4 vTangent  : TEXCOORDN;
#endif

#if !%REFRACTION
	#if %_RT_FOG
		half4 localFogColor : TEXCOORDN;
	#endif
#endif

	half4 vNormal  : TEXCOORDN;
	half4 cColor : TEXCOORDN;
	half4 lightData0 : TEXCOORDN;
	half4 lightData1 : TEXCOORDN;
};

/////////////////////////////////////////////////

void ParticlesDebug( inout SParticleVertex OUT, in float3 vCenter, in float3 vVertexPos )
{
#if %_RT_DEBUG0
	// Aproximate quad screen space area
	float fRadius =   length( vVertexPos.xyz - vCenter.xyz );

	float4 vCenterScreenTC = HPosToScreenTC( TransformPosition(float4(vCenter.xyz, 1)) );
	float4 vUpScreenTC = HPosToScreenTC( TransformPosition(float4(vCenter.xyz + CV_CameraUpVector.xyz * fRadius, 1)) );

	vCenterScreenTC /= vCenterScreenTC.w;
	vUpScreenTC /= vUpScreenTC.w;

	const float fScreenCoverageRatio = 15.h; // 15% of screen area. todo: expose via cvar
	OUT.baseTC.xy = saturate( length(vUpScreenTC.xy - vCenterScreenTC.xy) * fScreenCoverageRatio );
#endif
}

//////////////////////////////////////////////////////////////////////////////////////////////////
void Particle_Convert_TC( float4 baseTC, inout SParticleVertex OUT )
{
	// Save original coords
	OUT.baseTC.zw = baseTC.xy;
	
	// Apply tiling params to TCs
	OUT.baseTC.xy = baseTC.xy * TexTileSize.xy;
	
#if %_RT_ANIM_BLEND
	// Compute coords of 2nd blended tile
	OUT.blendTC.xy = OUT.baseTC.xy;
	float tileBlend = baseTC.z * 255.0 + 1.0;
	
	// Detect wrap to 1st frame when looping
	if (floor((tileBlend - TexTileSize.w) / TexTileSize.z) > floor((baseTC.z * 255.0 - TexTileSize.w) / TexTileSize.z))
		tileBlend -= TexTileSize.z;
	float tileXBlend = tileBlend * TexTileSize.x;
	OUT.blendTC.x += frac(tileXBlend);
	OUT.blendTC.y += floor(tileXBlend) * TexTileSize.y;
	OUT.blendTC.z = baseTC.w;
#endif

	float tileX = baseTC.z * 255.0 * TexTileSize.x;
	OUT.baseTC.x += frac(tileX);
	OUT.baseTC.y += floor(tileX) * TexTileSize.y;
	OUT.baseTC.y *= ParticleParams.w;
}

float GetShadowOccl(float3 worldPos, float3 worldNormal)
{
	half objectsShadow = 1.0f;
	half cloudsShadow = 1.0f;
	
	// object shadows
	float4 vShadowWPos = float4(worldPos,1);
	vert2fragShadowCommon shadowTC;
	GenShadowTC(vShadowWPos, shadowTC);
	objectsShadow = ShadowDepthTest(shadowTC, worldNormal*0.125).r;

	// cloud shadows
#if %_RT_LIGHT_TEX_PROJ
	float2 uv = ComputeCloudShadowMapUV(worldPos);
	cloudsShadow = saturate( tex2Dlod(cloudShadowMap, float4((uv * CloudShadowAnimParams.xy - CloudShadowAnimParams.zw) , 0, 0)).r * CloudShadowParams.w );
	cloudsShadow = lerp ( cloudsShadow, 1 - cloudsShadow, CloudShadowParams.z ); // 0 = do not invert, 1 invert
#endif

	return min(objectsShadow, cloudsShadow);
}

//////////////////////////////////////////////////////////////////////////////////////////////////
SParticleVertex ParticleCommonVertexOutput(in float4 vPos, in app2vertParticleGeneral IN, in half4 vSSCenterMotion)
{
	SParticleVertex OUT = (SParticleVertex)0;
	
#if %_RT_DEBUG0
	float3 vCenter = vPos.xyz;
#endif

#if %_RT_SOFT_PARTICLE
	// soft particle thickness in .w
	float fSoftScale = vPos.w;
	vPos.w = 1;
#endif

	Particle_Setup_General( vPos, IN, OUT);
	

	//////////////////////////////////////////////////////

	// Apply tiling params to tcs
	Particle_Convert_TC(IN.baseTC, OUT);

	OUT.Color = IN.Color;

	// Compute alpha clipping params from input alpha
	OUT.alphaClip.xyz = ParticleAlphaTest[0].xyz + ParticleAlphaTest[1].xyz * IN.Color.aaa;
	OUT.alphaClip.z = clamp(OUT.alphaClip.z, 0.001, 1 - OUT.alphaClip.y);
	OUT.alphaClip.x /= OUT.alphaClip.z;

#if FEATURE_PARTICLES_TESSELLATION && !%_RT_NO_TESSELLATION
	OUT.lightData0 = 0;
	OUT.lightData1 = half4(OUT.Color.rgb, ParticleLightParams.z);		// Backlight ratio
#else	
	half shadowOccl = 1.0f;

	#if %_RT_PARTICLE_SHADOW
		shadowOccl = GetShadowOccl(OUT.vWorldPos.xyz, OUT.vNormal.xyz);
		OUT.blendTC.w = shadowOccl;
	#endif

	const float backLightning = ParticleLightParams.z;
	SParticleLightInfo lightInfo;
	ProjectLightVolume(OUT.vWorldPos.xyz, shadowOccl, backLightning, lightInfo);
	ToLightData(lightInfo, OUT.lightData0, OUT.lightData1);

#endif
#if %_RT_SOFT_PARTICLE
	// soft particle thickness in .w
	OUT.alphaClip.w = fSoftScale;
#endif

#if %_RT_FOG && !%REFRACTION
#if !%_RT_VOLUMETRIC_FOG
	OUT.localFogColor = GetVolumetricFogColor( vPos );
#else
	OUT.localFogColor = GetVolumetricFogAnalyticalColorByWorldPos( vPos );
#endif
#endif

#if %_RT_DEBUG0
	ParticlesDebug( OUT, vPos.xyz, vCenter );
#endif

	return OUT;
}

//////////////////////////////////////////////////////////////////////
// Unify inputs from SParticleVertex into vertex ouput structure

OutputVS UnifyParticleOutputVS(in SParticleVertex pCommon)
{
	OutputVS OUT = (OutputVS) 0;

	OUT.HPosition = pCommon.HPosition;

	OUT.baseTC = pCommon.baseTC;

#if %_RT_ANIM_BLEND || %_RT_PARTICLE_SHADOW
	OUT.blendTC = pCommon.blendTC;
#endif

	OUT.alphaClip = pCommon.alphaClip;

#if (FEATURE_PARTICLES_TESSELLATION && !%_RT_NO_TESSELLATION) || %BUMP_MAP || USE_MATERIAL
	OUT.vWorldPos = pCommon.vWorldPos;
#endif
#if USE_MATERIAL
	OUT.vTangent = pCommon.vTangent;
#endif

#if %_RT_FOG && !%REFRACTION
	OUT.localFogColor = pCommon.localFogColor;
#endif

	OUT.vNormal = pCommon.vNormal;
	OUT.cColor = pCommon.Color;

	OUT.lightData0 = pCommon.lightData0;
	OUT.lightData1 = pCommon.lightData1;

	return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

half4 CenterMotion()
{
#if %_RT_MOTION_BLUR
	const half4 vCenterPos = TransformPosition(IN.Position);
	const half4 vCenterPosPrev = mul(ViewProjMatrPrev, IN.Position);
	// Current screen space position of particle center (xy), screen space camera motion vector (zw)
	half4 vSSCenterMotion = half4(vCenterPos.xy/vCenterPos.w, vCenterPosPrev.xy/vCenterPosPrev.w);
	vSSCenterMotion.zw = vSSCenterMotion.xy - vSSCenterMotion.zw;
	return vSSCenterMotion;
#else
	return 0;
#endif
}

void ParticleSpriteCommon(inout float4 Position, inout app2vertParticleGeneral IN)
{
	IN.baseTC = GetInputColor(IN.baseTC);
	IN.Color = GetInputColor(IN.Color);

#if %_RT_SOFT_PARTICLE
	// soft particle 1/thickness^2 in Position.w
	float3 vAxis = (IN.XAxis + IN.YAxis) * (0.5 * ParticleSoftParams.x);
	Position.w = 1 / dot(vAxis, vAxis);
#endif
}



OutputVS ParticleVS(
	in float4 Position: POSITION, app2vertParticleGeneral IN,
	uint vertID: SV_VertexID)
{
	ParticleSpriteCommon(Position, IN);

#if %_RT_SPRITE
	// Vertex data is instanced
	[branch] if (IN.baseTC.x)
	{
		// Octagonal shape
		static const half2 avOctVerts[] =
		{
			half2(0.294h, 0.h),    //0
			half2(0.706h, 0.h),    //1
			half2(0.h,    0.294h), //7
			half2(1.h,    0.294h), //2
			half2(0.h,    0.706h), //6
			half2(1.h,    0.706h), //3
			half2(0.294h, 1.h),    //5
			half2(0.706h, 1.h),    //4
		};
		IN.baseTC.xy = avOctVerts[vertID];
	}
	else
	{
		// Quad shape
		IN.baseTC.x = vertID & 1;
		IN.baseTC.y = vertID & 2 ? 1 : 0;
	}
#endif

	SParticleVertex MID = ParticleCommonVertexOutput(Position, IN, CenterMotion());	
	return UnifyParticleOutputVS(MID);
}


////////////////////////////////////////////////////////////////////////////////////////////////////
// Packaging


float UbyteToFloat(uint v)
{
	const float conv = 1.0 / 255.0;
	return float(v * conv);
}


float4 UintToFloat4(uint v)
{
	float4 res;
	res.x = UbyteToFloat(v&0xff);
	res.y = UbyteToFloat((v>>8)&0xff);
	res.z = UbyteToFloat((v>>16)&0xff);
	res.w = UbyteToFloat((v>>24)&0xff);
	return res;
}


////////////////////////////////////////////////////////////////////////////////////////////////////


OutputVS PulledParticleVS(uint vertID: SV_VertexID)
{
#if %_RT_SPRITE
	const uint particleId = (vertID>>2) + asuint(PullVerticesInfo.x);

	float4 Position = float4(positionsSRV[particleId], 1.0);

	app2vertParticleGeneral IN = (app2vertParticleGeneral)0;
	IN.XAxis = axesSRV[particleId].XAxis;
	IN.YAxis = axesSRV[particleId].YAxis;
	IN.Color = UintToFloat4(colorSTsSRV[particleId].Color);
	IN.baseTC = UintToFloat4(colorSTsSRV[particleId].baseTC);

	ParticleSpriteCommon(Position, IN);

	IN.baseTC.x = vertID & 1;
	IN.baseTC.y = vertID & 2 ? 1 : 0;
#else
	const uint vertexId = (vertID>>1) + asuint(PullVerticesInfo.x);
	const uint isDegen = (colorSTsSRV[vertexId].baseTC >> 16) & 1;
	const uint isPositive = (vertID & 1);
	const uint offset = isDegen & isPositive;

	float4 Position = float4(positionsSRV[vertexId+offset], 1.0);
	app2vertParticleGeneral IN = (app2vertParticleGeneral)0;
	IN.XAxis = axesSRV[vertexId+offset].XAxis;
	IN.YAxis = axesSRV[vertexId+offset].YAxis;
	IN.Color = UintToFloat4(colorSTsSRV[vertexId+offset].Color);
	IN.baseTC = UintToFloat4(colorSTsSRV[vertexId+offset].baseTC);

	ParticleSpriteCommon(Position, IN);

	IN.baseTC.x = isPositive ^ isDegen;

#endif

	SParticleVertex MID = ParticleCommonVertexOutput(Position, IN, CenterMotion());	
	return UnifyParticleOutputVS(MID);
}
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "GpuParticlesCommon.cfi"

float4 cameraRightVector : PB_CameraRight;
float4 cameraUpVector : PB_CameraUp;

cbuffer g_gpuParticleVertexShaderParameters : register(b4)
{
	float c_axisScale;
};

StructuredBuffer<SDefaultParticleData> gpuParticleSRV : register(t7);
OutputVS GpuParticleVS(uint vertID: SV_VertexID)
{
	const uint particleId = (vertID >> 2) + asuint(PullVerticesInfo.x);
	float4 Position = float4(gpuParticleSRV[particleId].position, 1.0);
	app2vertParticleGeneral IN = (app2vertParticleGeneral)0;
	uint color = gpuParticleSRV[particleId].color;
	SAuxData auxData = UnpackAuxData(gpuParticleSRV[particleId].auxData);
	float size = auxData.size;
#if %GPU_FACING_VELOCITY
	float3 vel = gpuParticleSRV[particleId].velocity;
	float length2 = dot(vel,vel);
	float3 moveDirection = -cameraRightVector;
	if (length2 > 0.0)
		moveDirection = normalize(gpuParticleSRV[particleId].velocity);
	float3 normal = normalize(Position - g_VS_WorldViewPos);
	float axisSize = max(size, sqrt(length2)*c_axisScale);
	IN.XAxis = moveDirection*axisSize;
	IN.YAxis = cross(-moveDirection, normal)*size;
#else
	IN.XAxis = cameraRightVector * size;
	IN.YAxis = -cameraUpVector * size;
#endif
	IN.Color = UintToFloat4(color);
	float animPos = auxData.normalAge * TexTileSize.z;

	ParticleSpriteCommon(Position, IN);

	IN.baseTC.x = vertID & 1;
	IN.baseTC.y = vertID & 2 ? 1 : 0;
	IN.baseTC.z = int(animPos) / 255.f;
	IN.baseTC.w = (animPos - int(animPos));

	SParticleVertex MID = ParticleCommonVertexOutput(Position, IN, CenterMotion());	
	return UnifyParticleOutputVS(MID);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// DX11 specifics

struct ParticleHSInput
{
	float4 Position: TEXCOORD6;
	app2vertParticleGeneral VSIn;
};

ParticleHSInput ParticleTessVS(float4 Position: POSITION, app2vertParticleGeneral IN)
{
	ParticleHSInput OUT;
	OUT.Position = Position;
	OUT.VSIn = IN;
	ParticleSpriteCommon(OUT.Position, OUT.VSIn);
	return OUT;
}

struct ControlPointHS
{
	float4 HPosition : TEXCOORDN;

	float4 baseTC    : TEXCOORDN;
#if %_RT_ANIM_BLEND || %_RT_PARTICLE_SHADOW
	float4 blendTC   : TEXCOORDN;
#endif
	half4 alphaClip : TEXCOORDN;

	half4 vWorldPos : TEXCOORDN;
#if !%_RT_SPRITE
	half3 vYAxis : TEXCOORDN;
#endif

#if USE_MATERIAL
	half4 vTangent  : TEXCOORDN;
#endif

#if !%REFRACTION
	#if %_RT_FOG
	half4 localFogColor : TEXCOORDN;
	#endif
#endif

	half4 vNormal   : TEXCOORDN;
	half4 cColor : TEXCOORDN;
	half4 lightData0 : TEXCOORDN;
	half4 lightData1 : TEXCOORDN;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
struct TessFactorsHS
{
	float Edges[4]  : SV_TessFactor;
	float Inside[2] : SV_InsideTessFactor;
};

//////////////////////////////////////////////////////////////////////////////////////////////////
TessFactorsHS ParticleConstFuncHS(OutputPatch<ControlPointHS, 4> p)
{
	TessFactorsHS OUT = (TessFactorsHS)0;
	bool bFrustumCulled = ViewFrustumCull(p[0].vWorldPos.xyz, p[1].vWorldPos.xyz, p[2].vWorldPos.xyz, p[3].vWorldPos.xyz, CV_FrustumPlaneEquation, 5.0);
	if (bFrustumCulled)
		return OUT;

	float fTrianglePixSize = CV_TessInfo.w;

	float2 Scr[4];

	[unroll] for (int i = 0; i < 4; i++)
	{
		float4 ScrPos = HPosToScreenTC( p[i].HPosition );
		Scr[i] = ScrPos.xy / (ScrPos.w * fTrianglePixSize) * CV_ScreenSize.xy;
	}
	float4 EdgeTess = float4
	(
		length(Scr[0] - Scr[2]),
		length(Scr[0] - Scr[1]),
		length(Scr[1] - Scr[3]),
		length(Scr[2] - Scr[3])
	);

#if %_RT_PARTICLE_SHADOW || !%_RT_SPRITE
	// higher tessellation if particle receives shadows, or if tessellating curved connected particles
	const float fMaxTessFactor = 64;
#else
	const float fMaxTessFactor = 8;
#endif	
	EdgeTess = min(EdgeTess, fMaxTessFactor);

	// Assign tessellation levels. 
	OUT.Edges[0] = EdgeTess.x;
	OUT.Edges[1] = EdgeTess.y;
	OUT.Edges[2] = EdgeTess.z;
	OUT.Edges[3] = EdgeTess.w;

	OUT.Inside[1] = (EdgeTess.x + EdgeTess.z) * 0.5;
	OUT.Inside[0] = (EdgeTess.y + EdgeTess.w) * 0.5;

	return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

[domain("quad")]
[partitioning("fractional_even")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(4)]
[patchconstantfunc("ParticleConstFuncHS")]
[maxtessfactor(64)]
ControlPointHS ParticleHS(
#if %_RT_SPRITE
	InputPatch<ParticleHSInput, 1> inputPatch,
#else
	InputPatch<ParticleHSInput, 4> inputPatch,
#endif
	uint uCPID : SV_OutputControlPointID)
{
	// Modify tex coords for 4 patch corners
#if %_RT_SPRITE
	ParticleHSInput IN = inputPatch[0];
	IN.VSIn.baseTC.x = uCPID & 1;
	IN.VSIn.baseTC.y = uCPID & 2 ? 1 : 0;
#else
	ParticleHSInput IN = inputPatch[uCPID];
#endif

	SParticleVertex MID = ParticleCommonVertexOutput(IN.Position, IN.VSIn, 0);

	ControlPointHS OUT = (ControlPointHS)0;

	OUT.HPosition = MID.HPosition;

	OUT.baseTC = MID.baseTC;
#if %_RT_ANIM_BLEND
	OUT.blendTC = MID.blendTC;
#endif
	OUT.alphaClip = MID.alphaClip;

	OUT.vWorldPos = MID.vWorldPos;

#if !%_RT_SPRITE
	OUT.vYAxis = half3(IN.VSIn.YAxis);
#endif

#if USE_MATERIAL
	OUT.vTangent = MID.vTangent;
#endif

#if %_RT_FOG && !%REFRACTION
	OUT.localFogColor = MID.localFogColor;
#endif

	OUT.vNormal = MID.vNormal;
	OUT.cColor = MID.Color;

	OUT.lightData0 = MID.lightData0;
	OUT.lightData1 = MID.lightData1;

	return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

[domain("quad")]
OutputVS ParticleDS(float2 QuadUV : SV_DomainLocation, const OutputPatch<ControlPointHS, 4> ControlPt, TessFactorsHS TessFactorsInput)
{
	OutputVS OUT = (OutputVS)0;

	float4 vWorldPos = BilinearInterp(QuadUV, ControlPt[0].vWorldPos, ControlPt[1].vWorldPos, ControlPt[2].vWorldPos, ControlPt[3].vWorldPos);

#if !%_RT_SPRITE
	// Add curve coeffs
	float uut = (1-QuadUV.y) * (1-QuadUV.y) * QuadUV.y;
	float utt = QuadUV.y * QuadUV.y * (1-QuadUV.y);

	float3 vY0 = lerp(ControlPt[0].vYAxis, ControlPt[1].vYAxis, QuadUV.x);
	float3 vY1 = lerp(ControlPt[2].vYAxis, ControlPt[3].vYAxis, QuadUV.x);
	float3 vDP = lerp(ControlPt[2].vWorldPos - ControlPt[0].vWorldPos,
										ControlPt[3].vWorldPos - ControlPt[1].vWorldPos, QuadUV.x);
	vWorldPos.xyz += vDP * (utt - uut) + vY0 * uut - vY1 * utt;
#endif

	OUT.HPosition = TransformPosition(float4(vWorldPos.xyz, 1));

	OUT.baseTC = BilinearInterp(QuadUV, ControlPt[0].baseTC, ControlPt[1].baseTC, ControlPt[2].baseTC, ControlPt[3].baseTC);
#if %_RT_ANIM_BLEND || %_RT_PARTICLE_SHADOW
	OUT.blendTC = BilinearInterp(QuadUV, ControlPt[0].blendTC.xyzw, ControlPt[1].blendTC.xyzw, ControlPt[2].blendTC.xyzw, ControlPt[3].blendTC.xyzw);
#endif
	OUT.alphaClip = BilinearInterp(QuadUV, ControlPt[0].alphaClip, ControlPt[1].alphaClip, ControlPt[2].alphaClip, ControlPt[3].alphaClip);


#if %ENVIRONMENT_MAP || USE_MATERIAL
	OUT.vWorldPos = vWorldPos;
#endif
#if USE_MATERIAL
	OUT.vTangent = BilinearInterp(QuadUV, ControlPt[0].vTangent, ControlPt[1].vTangent, ControlPt[2].vTangent, ControlPt[3].vTangent);
#endif

#if %_RT_FOG && !%REFRACTION
	OUT.localFogColor = BilinearInterp(QuadUV, ControlPt[0].localFogColor, ControlPt[1].localFogColor, ControlPt[2].localFogColor, ControlPt[3].localFogColor);
#endif

	OUT.cColor = BilinearInterp(QuadUV, ControlPt[0].cColor, ControlPt[1].cColor, ControlPt[2].cColor, ControlPt[3].cColor);

	float3 vNormal = 0;
	OUT.vNormal = BilinearInterp(QuadUV, ControlPt[0].vNormal, ControlPt[1].vNormal, ControlPt[2].vNormal, ControlPt[3].vNormal);
	vNormal = OUT.vNormal;
	
	half shadowOccl = 1;// Sun shadows
	#if %_RT_PARTICLE_SHADOW
		shadowOccl = GetShadowOccl(vWorldPos.xyz, vNormal.xyz);
		OUT.blendTC.w = shadowOccl;
	#endif

	const float backLighting = ParticleLightParams.z;
	SParticleLightInfo lightInfo;
	ProjectLightVolume(vWorldPos.xyz, shadowOccl, backLighting, lightInfo);
	ToLightData(lightInfo, OUT.lightData0, OUT.lightData1);

	return OUT;
}

//////////////////////////////////////////////////////////////////////
	
void ApplyTexCoordsDeformation( inout OutputVS IN, float4 WPos )
{
#if USE_MATERIAL

	half4 baseColor = GetDiffuseTex(diffuseTex, IN.baseTC.xy);

	#if %SCREEN_SPACE_DEFORMATION

		half3 vBump = half3(0,0,1);
		// apply rescale
		PerturbationScale *= WPos.w* 0.05;

		float2 tcProj = WPos.xy;
		float2 tcAnim = float2(0.5, CV_AnimGenParams.y * AnimSpeed + 0.5);
		PerturbationScale *= (tcProj-0.5);

		vBump.xy  = GetXYNormalMap(customTex, PerturbationScale + tcAnim);
		vBump.xy += GetXYNormalMap(customTex, PerturbationScale * 1.5 + tcAnim);

		IN.baseTC.xy += vBump.xy * PerturbationStrength * baseColor.w;

	#elif %DEFORMATION
	
		float2 tcDeform = IN.baseTC.zw;
		float4 tcAnim = CV_AnimGenParams.y * DeformAnimSpeed * float4(0.9, 0.9, 2, 2) + float4(0.5, 0.5, 0.75, 1.0);
		float4 tcBump = (tcDeform.xyxy - 0.5)* DeformTile * float4(1,1,2,2) + tcAnim.xyzw;

		half2 vBump = GetXYNormalMap(customTex, tcBump.xy);
		vBump.xy   += GetXYNormalMap(customTex, tcBump.zw);

		IN.baseTC.xy += vBump.xy * DeformAmount;
		#if %_RT_ANIM_BLEND
			IN.blendTC.xy += vBump.xy * DeformAmount;
		#endif
		
	#endif	

#endif
}

//////////////////////////////////////////////////////////////////////
void ApplyColorLookup( in OutputVS IN, inout half4 cBaseColor )
{
#if USE_MATERIAL
	// are artist using this at all ? if not remove

	#if %COLOR_LOOKUP
	half fLum = dot(cBaseColor.xyz, 0.333 );
	cBaseColor.xyz = saturate ( cBaseColor.w *ColLookupAmplitude * GetCustomSecTex(customSecondaryTex,  ColLookupColPhase * fLum  ) );
		#endif
#endif
}

//////////////////////////////////////////////////////////////////////
half4 GetDiffuseMap(OutputVS IN)
{
	half4 cDiffuseMap = GetDiffuseTex(diffuseTex, IN.baseTC.xy);

#if %_RT_ANIM_BLEND
	// Blend in second tile
	half4 cDiffuseMapSec = GetDiffuseTex(diffuseTex, IN.blendTC.xy);
	cDiffuseMap += (cDiffuseMapSec - cDiffuseMap) * IN.blendTC.z;
#endif

	ApplyColorLookup( IN, cDiffuseMap );

	//cDiffuseMap *= IN.Color; // baked in lighting

	return cDiffuseMap;
}

//////////////////////////////////////////////////////////////////////
half4 GetGlowMap(OutputVS IN)
{
	half4 cGlowMap = 1.0;
#if %GLOW_MAP
	cGlowMap = GetEmittanceTex(glowTex, IN.baseTC.xy);
#if %_RT_ANIM_BLEND
	half4 cGlowMapSec = GetEmittanceTex(glowTex, IN.blendTC.xy);
	cGlowMap += (cGlowMapSec - cGlowMap) * IN.blendTC.z;
#endif
#endif
	return cGlowMap;
}

//////////////////////////////////////////////////////////////////////
half3 GetNormalMap(OutputVS IN)
{
#if %NORMAL_MAP
	half3 cNormalMap = GetNormalMap(normalsTex, IN.baseTC.xy);
	#if %_RT_ANIM_BLEND
	half3 cNormalMapSec = GetNormalMap(normalsTex, IN.blendTC.xy);
	cNormalMap += (cNormalMapSec - cNormalMap) * IN.blendTC.z;
	#endif
	return cNormalMap;
#endif
	return half3(0, 0, 1);
}
//////////////////////////////////////////////////////////////////////
half4 GetRefractionMap( OutputVS IN, float4 tcScreen, half3 cNormalMap)
{
#if USE_MATERIAL
	#if %REFRACTION
	half2 tcRefraction = tcScreen + cNormalMap.xy * RefrBumpScale.x * IN.alphaClip.x;
	return DecodeHDRBuffer( tex2D(envMapSamplerRefr, tcRefraction ) );
	#endif
#endif
	return 0;
}

//////////////////////////////////////////////////////////////////////
half ApplySoftIntersection( inout half4 cFinal, float4 WPos, half fThicknessK )
{
#if %_RT_MSAA_QUALITY || %_RT_MSAA_QUALITY1
	const int nMsaaSamples = GetMSAASampleNum();		
	half fDepth = 0.0f;		
	for (int s=0; s<nMsaaSamples; s++) // Ideally would use pre-resolved depth target (note that existing resolved versions use sample0 for proper pixel/sample passes - having a max depth target will require extra mem)
		fDepth =  max(fDepth, GetDecodedSceneDepthMS(WPos.xy, nMsaaSamples, s));
#else
	const half fDepth = GetLinearDepthScaled( sceneLinearDepthTex, WPos.xy ).x; // todo: pre-computed linear depth could save a bunch
#endif

	const half fDist = max(min(fDepth-WPos.w, WPos.w), 0.0);
	const half fSoftParticle = 1.0 - exp(-fDist*fDist*fThicknessK);
	cFinal.a *= fSoftParticle;

#if !%_RT_ALPHABLEND
	cFinal.rgb *= fSoftParticle;
#endif

	return fSoftParticle;
}

//////////////////////////////////////////////////////////////////////
void ApplyFog( inout half4 cFinal, half4 avgFogVolumeContrib, half4 localFogColor)
{
#if %_RT_FOG && !%REFRACTION
	#if %_RT_ALPHABLEND
		cFinal.xyz = lerp( localFogColor.xyz, cFinal.xyz, localFogColor.w );
		cFinal.xyz = lerp( avgFogVolumeContrib.xyz, cFinal.xyz, avgFogVolumeContrib.w );
	#else
		cFinal.xyz *= localFogColor.w;
		cFinal.xyz *= avgFogVolumeContrib.w;  
	#endif
#endif
}

//////////////////////////////////////////////////////////////////////

float4 GetScreenCoords( float4 WPos )
{ 
#if %_RT_PROJECTION_MULTI_RES || %_RT_PROJECTION_LENS_MATCHED
	float4 tcScreen = WPos * float4(NvGetProjectionData().TextureSizeInv, 1, 1);
#else
	float4 tcScreen = WPos * float4(CV_ScreenSize.zw * 2.0, 1, 1); //todo: zw should not be half pixel, should be pixel size
#endif

	return tcScreen;
}

//////////////////////////////////////////////////////////////////////
struct pixoutParticle
{
	half4 Color : COLOR0;

#if %DEPTH_FIXUP
	half4 BlendFactors : COLOR1;
#endif
};

[earlydepthstencil]
pixoutParticle ParticlePS(OutputVS IN)
{
	pixoutParticle OUT = (pixoutParticle) 0;

#if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3    
	// Custom debug mode for particles
	#if %_RT_DEBUG0 && !%_RT_DEBUG1 && !%_RT_DEBUG2 && !%_RT_DEBUG3
		OUT.Color = float4(tex2D(gradientMapSampler, IN.baseTC.x).xyz, 0.5);
		OUT.Color.xyz *= OUT.Color.xyz * 0.1h; // output linear space and 10% brightness - compensate for hdr blooming kicking in
	#else
		DebugOutput(OUT.Color, float4(IN.baseTC.xy, 0, 1));
	#endif
	return OUT;
#endif
	
	float4 tcScreen = GetScreenCoords( IN.HPosition );

	ApplyTexCoordsDeformation( IN, tcScreen );

	half4 cDiffuseMap = GetDiffuseMap(IN);
	half4 cGlowMap = GetGlowMap(IN);
	
	// Early-out alpha clipping and scaling
	cDiffuseMap.a -= IN.alphaClip.y;
	if (cDiffuseMap.a <= 0.004)
		discard;

	cDiffuseMap.a = min(cDiffuseMap.a, IN.alphaClip.z) * IN.alphaClip.x;
	cDiffuseMap.a = saturate(cDiffuseMap.a);

	#if USE_MATERIAL
		cDiffuseMap.rgb *= MatDifColor; // for backward compatibility - art should just use particle color as diffuse
	#endif

	half3 cNormalMap = GetNormalMap(IN);

	half4 cDiffuseAcc = 0;

	half3 vNormal;

	#if USE_MATERIAL
	const half3x3 mTangentToWS = half3x3(IN.vTangent.xyz, float3(IN.vNormal.w, IN.vTangent.w, IN.vWorldPos.w), IN.vNormal.xyz);
	vNormal = mul(cNormalMap, mTangentToWS);
	#else
	vNormal = IN.vNormal.xyz;
	#endif

	vNormal = normalize(vNormal);

	SParticleLightInfo lightInfo = FromLightData(IN.lightData0, IN.lightData1);
	cDiffuseAcc.rgb = GetEnvLighting(
		lightInfo, vNormal,
		ParticleLightParams.x, ParticleLightParams.y, ParticleLightParams.z);


#if %_RT_ENVIRONMENT_CUBEMAP
	half3 envDiffuseColor = GetEnvironmentCMap(environmentCMSampler, vNormal.xyz, 0.0f).rgb;
	envDiffuseColor *= EnvProbeMult.rgb * ParticleLightParams.x;
	cDiffuseAcc.rgb += envDiffuseColor;
#endif  

	half4 cFinal = float4(cDiffuseAcc.rgb, cDiffuseMap.a);

	// Apply material color
	cFinal.xyz *= cDiffuseMap.xyz;

#if USE_MATERIAL
	#if %REFRACTION
		cFinal.rgb = GetRefractionMap( IN, tcScreen, cNormalMap );
		#if %REFRACTION_TINTING
			cFinal.rgb *= cDiffuseMap.rgb;
		#endif
	#endif

	#if %SPECULAR_LIGHTING
		{
			half3 cSpecularAcc = 0;
			half3 vView = normalize(PS_WorldViewPos.xyz-IN.vWorldPos.xyz);
			half fGloss = MatSpecColor.w;	

			#if %_RT_ENVIRONMENT_CUBEMAP
				half fNdotE = saturate( dot(vView.xyz, vNormal.xyz));                                        // 1 alu
				half3 vReflVec = (2.0h * fNdotE * vNormal.xyz) - vView.xyz;  
				cSpecularAcc.rgb = GetEnvironmentCMap(environmentCMSampler, vReflVec.xyz, fGloss);
				cSpecularAcc.rgb *= EnvProbeMult.rgb * EnvProbeMult.a;
			#endif	
			
			// sun spec
			float3 sunIntensity = CV_SunColor.rgb;
	
			#if %_RT_PARTICLE_SHADOW
				sunIntensity *= IN.blendTC.w;
			#endif
			
			cSpecularAcc.rgb += BlinnBRDF(vNormal, vView, CV_SunLightDir, fGloss) * saturate(dot(vNormal, CV_SunLightDir)) * sunIntensity;
			cSpecularAcc *= MatSpecColor.rgb;

			// combine with diffuse, but make sure we stay energy conservant
			cFinal.rgb *= saturate( 1 - GetLuminance( MatSpecColor ) );
			cFinal.rgb += cSpecularAcc;
		}
	#endif
#endif

	// Add particle glow 
	cFinal.rgb += cDiffuseMap.a * cDiffuseMap.rgb * cGlowMap.rgb * (half3) GlowParams.rgb; // todo: only add if really used

	// add particle color
	cFinal.rgb *= IN.cColor.rgb;

	// Premultiplied alpha for additive particles
#if !%_RT_ALPHABLEND
	cFinal.xyz *= cFinal.w;
#endif

#if %_RT_SOFT_PARTICLE	
	ApplySoftIntersection(cFinal, tcScreen, IN.alphaClip.w);
#endif

#if %_RT_FOG && !%REFRACTION
	#if !%_RT_VOLUMETRIC_FOG
		ApplyFog(cFinal, AvgFogVolumeContrib, IN.localFogColor);
	#else
		VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenPos(IN.HPosition);
		float4 vf = GetVolumetricFogValue(vtc);
		#if %_RT_ALPHABLEND
			// apply volumetric fog for alpha blend mode.
			ApplyVolumetricFog(vf, IN.localFogColor, vtc, cFinal.rgb);
		#else
			// apply transmittance for additive blend mode.
			ApplyVolumetricFogTransmittance(vf, IN.localFogColor, vtc, cFinal.rgb);
		#endif
	#endif
#endif

#if !%REFRACTION  
	cFinal.rgb *= PS_HDR_RANGE_ADAPT_MAX; // Re-scale hdr range for consoles
#endif

	OUT.Color = cFinal;

#if %DEPTH_FIXUP
	const float fZ = tcScreen.w * PS_NearFarClipDist.w;
	OUT.Color.a = cFinal.a > DepthFixupThreshold ? -fZ : 1;
	OUT.BlendFactors = cFinal.a;
#endif

	return OUT;
}


//////////////////////////////////////////////////////////////////////
// Fog density injection
//////////////////////////////////////////////////////////////////////
struct OutputParticleVolumeFogVS
{
	float4 HPosition	: POSITION;

	float4 baseTC			: TEXCOORDN; // xy: texcoords, zw: SParticleVertex::blendTC.xy

	float4 alphaClip	: TEXCOORDN; // xyz: aplpha clip params, w: linear depth

	float4 color			: TEXCORRDN; // xyz: vertex color, w: thickness

#if %_RT_ANIM_BLEND
	float blendTC		: TEXCOORDN; // SParticleVertex::blendTC.z
#endif
};

struct OutputParticleVolumeFogGS
{
	float4 HPosition	: POSITION;

	float4 baseTC			: TEXCOORDN; // xy: texcoords, zw: SParticleVertex::blendTC.xy

	float4 alphaClip	: TEXCOORDN; //xyz: aplpha clip params, w: depth of voxel

	float4 color			: TEXCORRDN; // xyz: vertex color, w: SParticleVertex::blendTC.z

	float4 volume			: TEXCOORDN;

	uint rtindex			: SV_RenderTargetArrayIndex;
};

struct pixoutParticleVolumeFogPS
{
	half4 Color : COLOR0;
	half4 Color1 : COLOR1;
	half4 Color2 : COLOR2;
};

OutputParticleVolumeFogVS ParticleVolumeFogVS(in float4 Position: POSITION, app2vertParticleGeneral IN, uint vertID: SV_VertexID)
{
	ParticleSpriteCommon(Position, IN);

#if %_RT_SPRITE
	// Vertex data is instanced
	[branch] if (IN.baseTC.x)
	{
		// Octagonal shape
		static const half2 avOctVerts[] =
		{
			half2(0.294h, 0.h),    //0
			half2(0.706h, 0.h),    //1
			half2(0.h,    0.294h), //7
			half2(1.h,    0.294h), //2
			half2(0.h,    0.706h), //6
			half2(1.h,    0.706h), //3
			half2(0.294h, 1.h),    //5
			half2(0.706h, 1.h),    //4
		};
		IN.baseTC.xy = avOctVerts[vertID];
	}
	else
	{
		// Quad shape
		IN.baseTC.x = vertID & 1;
		IN.baseTC.y = vertID & 2 ? 1 : 0;
	}
#endif
	SParticleVertex MID = ParticleCommonVertexOutput(Position, IN, CenterMotion());

	Position.w = 1.0f;
	float4 hPosition = TransformPosition(Position);

	// scale aplha to fog density.
	MID.alphaClip.x *= 0.25f;

	// calculate thickness
	float thickness = length(IN.XAxis + IN.YAxis);
	thickness *= ParticleSoftParams.z;

	OutputParticleVolumeFogVS OUT;
	OUT.HPosition = MID.HPosition;
	OUT.baseTC = MID.baseTC;
#if %_RT_ANIM_BLEND
	OUT.baseTC.zw = MID.blendTC.xy;
	OUT.blendTC.x = MID.blendTC.z;
#endif
	OUT.alphaClip.xyz = MID.alphaClip.xyz;
	OUT.alphaClip.w = hPosition.w;// this is due to using same depth on every triangles in a particle.
	OUT.color.xyz = MID.Color.xyz;
	OUT.color.w = thickness;

	return OUT;
}

// max 16 slices per one particle sprite
[maxvertexcount(48)]
void ParticleVolumeFogGS( triangle OutputParticleVolumeFogVS IN[3], inout TriangleStream<OutputParticleVolumeFogGS> outputStream )
{
	const float maxRange = vfDistributionParams.x + vfDistributionParams.y;
	const float rcpMaxSlices = vfSamplingParams.w;
	const float maxThickness = 7.0f * rcpMaxSlices * maxRange;//max length of half thickness is less than 7 slices.
	const float thickness = min(maxThickness, IN[0].color.w);

	const float linearDepth = IN[0].alphaClip.w;
	const float linearDepthFront = linearDepth - thickness;
	const float linearDepthBack = linearDepth + thickness;

	const float depthIndexFront = vfSamplingParams.z * GetVolumetricFogDepthTexcoord(linearDepthFront);
	const float depthIndexBack = vfSamplingParams.z * GetVolumetricFogDepthTexcoord(linearDepthBack);
	const uint sliceStartIndex = max(0.0f, floor(depthIndexFront));
	const uint sliceEndIndex = min(vfSamplingParams.z - 2, ceil(depthIndexBack));

	for(uint i = sliceStartIndex; i <= sliceEndIndex; ++i)
	{
		OutputParticleVolumeFogGS OUT;
		OUT.rtindex = i;

		float depthFront0 = GetVolumetricFogLinearDepth(i - 1.0f);
		float depthFront1 = GetVolumetricFogLinearDepth(i);
		float depthBack1 = GetVolumetricFogLinearDepth(i + 1.0f);
		OUT.volume = float4(linearDepthFront, linearDepthBack, depthFront0, depthFront1);

		[unroll] for(uint j = 0; j < 3; ++j)
		{
			OUT.HPosition = IN[j].HPosition;
			OUT.baseTC = IN[j].baseTC;
			OUT.alphaClip.xyz = IN[j].alphaClip.xyz;
			OUT.alphaClip.w = depthBack1;
			OUT.color = IN[j].color;
#if %_RT_ANIM_BLEND
			OUT.color.w = IN[j].blendTC.x;
#endif

			outputStream.Append(OUT);
		}
		outputStream.RestartStrip();
	}
}

pixoutParticleVolumeFogPS ParticleVolumeFogPS(OutputParticleVolumeFogGS IN)
{
	pixoutParticleVolumeFogPS OUT = (pixoutParticleVolumeFogPS) 0;

#if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
	return OUT;
#endif
	
	half4 cDiffuseMap = GetDiffuseTex(diffuseTex, IN.baseTC.xy);
#if %_RT_ANIM_BLEND
	// Blend in second tile
	const float3 blendTC = float3(IN.baseTC.x, IN.baseTC.y, IN.color.w);
	half4 cDiffuseMapSec = GetDiffuseTex(diffuseTex, blendTC.xy);
	cDiffuseMap += (cDiffuseMapSec - cDiffuseMap) * blendTC.z;
#endif

	cDiffuseMap.rgb *= IN.color.rgb;
	
	// Early-out alpha clipping and scaling
	cDiffuseMap.a -= IN.alphaClip.y;
	if (cDiffuseMap.a <= 0.01)
		discard;

	cDiffuseMap.a = min(cDiffuseMap.a, IN.alphaClip.z) * IN.alphaClip.x;
	cDiffuseMap.a = saturate(cDiffuseMap.a);

	// calculate jittered coverage of voxel
	const float frameCount = vfDistributionParams.w;
	float jitter = GetJitterInternal(IN.HPosition.xy, frameCount.xx);
	const float depthFront0 = IN.volume.z;
	const float depthFront1 = IN.volume.w;
	const float depthBack0 = depthFront1;
	const float depthBack1 = IN.alphaClip.w;
	const float linearDepthFront = IN.volume.x;
	const float linearDepthBack = IN.volume.y;
	float voxelFront = lerp(depthFront0, depthFront1, jitter);
	float voxelBack = lerp(depthBack0, depthBack1, jitter);
	float frontDepth = clamp(linearDepthFront, voxelFront, voxelBack);
	float backDepth = clamp(linearDepthBack, voxelFront, voxelBack);
	float dist = voxelBack - voxelFront;
	dist = (dist > 0.0001f) ? dist : 0.0001f;
	const half coverage = (backDepth - frontDepth) / dist;

	cDiffuseMap.a *= coverage;
	half4 cFinal = float4(cDiffuseMap.rgb * cDiffuseMap.a, cDiffuseMap.a);
	half3 emission = ParticleLightParams.y * cDiffuseMap.a;

	OUT.Color.xyz = cFinal.xyz;
	OUT.Color1.x = cFinal.w;
	OUT.Color2.xyz = emission.xyz;

	return OUT;
}


/////////////////////////////////
// technique
// Needs to match the technique numbers in CRenderer::EF_GetParticleListAndBatchFlags function.

technique ParticlesTessellated
<
	string Script =  
		"TechniqueCustomRender=CustomRenderPass;"
//    "TechniqueThickness=ThicknessPass;"
>
{
	pass p0
	{
		VertexShader = ParticleTessVS();
		HullShader   = ParticleHS();
		DomainShader = ParticleDS();    
		GeometryShader = $AutoGS_MultiRes();
		PixelShader  = ParticlePS();  

		ZEnable = true;
		ZWriteEnable = false;
		CullMode = None;
	}
}

technique Particles
<
	string Script =  
			"TechniqueCustomRender=CustomRenderPass;"
//    "TechniqueThickness=ThicknessPass;"
>
{
	pass p0
	{
 		VertexShader = ParticleVS() ParticleVS;
		GeometryShader = $AutoGS_MultiRes();
		PixelShader  = ParticlePS();

		ZEnable = true;
		ZWriteEnable = false;
		CullMode = None;
	}
}

technique ParticlesPulled
<
	string Script = "TechniqueCustomRender=CustomRenderPass;"
>
{
	pass p0
	{
		VertexShader = PulledParticleVS() ParticleVS;
		GeometryShader = $AutoGS_MultiRes();
		PixelShader  = ParticlePS();

		ZEnable = true;
		ZWriteEnable = false;
		CullMode = None;
	}
}

technique ParticlesGpu
<
	string Script = "TechniqueCustomRender=CustomRenderPass;"
>
{
	pass p0
	{
		VertexShader = GpuParticleVS() ParticleVS;
		GeometryShader = $AutoGS_MultiRes();
		PixelShader  = ParticlePS();

		ZEnable = true;
		ZWriteEnable = false;
		CullMode = None;
	}
}

technique ParticlesVolumeFog
{
	pass p0
	{
		VertexShader = ParticleVolumeFogVS() ParticleVS;
		GeometryShader = ParticleVolumeFogGS() ParticleGS;
		PixelShader  = ParticleVolumeFogPS() ParticlePS;

		ZEnable = false;
		ZWriteEnable = false;
		CullMode = None;

		SrcBlend = ONE;
		DestBlend = ONE;
		AlphaBlendEnable = true;
	}
}

#include "ParticlesCustomPass.cfi"

